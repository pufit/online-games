// Generated by CoffeeScript 1.12.7
(function() {
  var Bullet, Field, Life, Player, bulletImage, cordToCord, field, fieldHeight, fieldWidth, fps, playerImages, winAdditionalWidth, winFieldHeight, winFieldWidth;

  cordToCord = function(x, y, k) {
    return [Math.floor(x * winFieldWidth / fieldWidth) + k, Math.floor(y * winFieldHeight / fieldHeight) + k];
  };

  window.cordToCord = cordToCord;

  Field = (function() {
    function Field(canvas, width, height) {
      this.canvas = canvas;
      this.width = width;
      this.height = height;
      this.ctx = this.canvas.getContext('2d');
      this.canvasWidth = this.canvas.width = winFieldWidth + winAdditionalWidth;
      this.canvasHeight = this.canvas.height = winFieldHeight;
      this.dotsColor = "173, 192, 219";
      this.players = [];
      this.bullets = [];
    }

    Field.prototype.playerShoot = function(player) {
      return this.bullets.push(new Bullet(player.x, player.y, player.direction, this));
    };

    Field.prototype.addPlayer = function(x, y, user) {
      var id, ids, l, len, player, ref;
      ref = this.players;
      for (l = 0, len = ref.length; l < len; l++) {
        player = ref[l];
        ids = player.id;
      }
      id = ids ? Math.max.apply(0, a) : 0;
      return this.players.push(new Player(x, y, id, this, user));
    };

    Field.prototype.removePlayer = function(id) {
      return this.bullets.splice(id, 1);
    };

    Field.prototype.drawDots = function() {
      var i, j, l, ref, results, x, y;
      results = [];
      for (i = l = 0, ref = fieldWidth; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
        results.push((function() {
          var m, ref1, results1;
          results1 = [];
          for (j = m = 0, ref1 = fieldHeight; 0 <= ref1 ? m < ref1 : m > ref1; j = 0 <= ref1 ? ++m : --m) {
            x = Math.floor(Math.floor(winFieldWidth / this.width) / 2) + Math.floor(i * winFieldWidth / this.width);
            y = Math.floor(Math.floor(winFieldHeight / this.height) / 2) + Math.floor(j * winFieldHeight / this.height);
            this.ctx.beginPath();
            this.ctx.arc(x, y, 1, 0, 2 * Math.PI);
            this.ctx.fillStyle = "rgb(" + this.dotsColor + ")";
            results1.push(this.ctx.fill());
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Field.prototype.update = function() {
      var bullet, l, len, len1, m, player, ref, ref1, results;
      ref = this.players;
      for (l = 0, len = ref.length; l < len; l++) {
        player = ref[l];
        if (!(player)) {
          continue;
        }
        if (player.shooting) {
          this.playerShoot(player);
        }
        player.update();
        player.speed_x = 0;
        player.speed_y = 0;
        player.shooting = false;
      }
      ref1 = this.bullets;
      results = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        bullet = ref1[m];
        if (!(bullet)) {
          continue;
        }
        bullet.update();
        results.push((function() {
          var len2, n, ref2, results1;
          ref2 = this.players;
          results1 = [];
          for (n = 0, len2 = ref2.length; n < len2; n++) {
            player = ref2[n];
            if (player) {
              if ((player.x === bullet.x) && (player.y === bullet.y)) {
                results1.push(player.life.damage());
              } else {
                results1.push(void 0);
              }
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Field.prototype.draw = function() {
      var bullet, l, len, len1, m, player, ref, ref1, results;
      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
      this.ctx.globalAlpha = 1;
      this.drawDots();
      ref = this.players;
      for (l = 0, len = ref.length; l < len; l++) {
        player = ref[l];
        player.draw();
        player.life.draw();
      }
      ref1 = this.bullets;
      results = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        bullet = ref1[m];
        results.push(bullet.draw());
      }
      return results;
    };

    Field.prototype.tick = function() {
      this.update();
      this.draw();
      return setTimeout(this.tick.bind(this), 1000 / fps);
    };

    Field.prototype.start = function() {
      return this.tick();
    };

    return Field;

  })();

  Player = (function() {
    function Player(x1, y1, id1, field1, user1) {
      var ref;
      this.x = x1;
      this.y = y1;
      this.id = id1;
      this.field = field1;
      this.user = user1;
      this.life = new Life(10, this.id, this.field, this.user);
      this.direction = 0;
      this.speed_x = this.speed_y = 0;
      this.width = Math.floor(winFieldWidth / fieldWidth) - 2;
      this.height = Math.floor(winFieldHeight / fieldHeight) - 2;
      ref = cordToCord(this.x, this.y, 2), this.real_x = ref[0], this.real_y = ref[1];
    }

    Player.prototype.update = function() {
      var ref;
      this.x += this.speed_x;
      this.y += this.speed_y;
      if (this.x >= this.field.width) {
        this.x = 0;
      }
      if (this.x < 0) {
        this.x = this.field.width - 1;
      }
      if (this.y >= this.field.height) {
        this.y = 0;
      }
      if (this.y < 0) {
        this.y = this.field.height - 1;
      }
      return ref = cordToCord(this.x, this.y, 2), this.real_x = ref[0], this.real_y = ref[1], ref;
    };

    Player.prototype.draw = function() {
      this.field.ctx.rotate(this.direction * 90 * Math.PI / 180);
      this.field.ctx.drawImage(playerImages[this.id], this.real_x, this.real_y, this.width, this.height);
      return this.field.ctx.restore();
    };

    return Player;

  })();

  Bullet = (function() {
    function Bullet(x1, y1, direction, field1) {
      var ref;
      this.x = x1;
      this.y = y1;
      this.direction = direction;
      this.field = field1;
      ref = cordToCord(this.x, this.y, 3), this.real_x = ref[0], this.real_y = ref[1];
      this.width = Math.floor(winFieldWidth / fieldWidth) - 8;
      this.height = Math.floor(winFieldHeight / fieldHeight) - 8;
      this.speed_x = this.speed_y = 0;
      if (this.direction === 2) {
        this.speed_x = -1;
      }
      if (this.direction === 0) {
        this.speed_x = 1;
      }
      if (this.direction === 1) {
        this.speed_y = -1;
      }
      if (this.direction === -1) {
        this.speed_y = 1;
      }
    }

    Bullet.prototype.update = function() {
      var ref;
      this.x += this.speed_x;
      this.y += this.speed_y;
      if (this.x >= this.field.width) {
        this.x = 0;
      }
      if (this.x < 0) {
        this.x = this.field.width - 1;
      }
      if (this.y >= this.field.height) {
        this.y = 0;
      }
      if (this.y < 0) {
        this.y = this.field.height - 1;
      }
      return ref = cordToCord(this.x, this.y, 2), this.real_x = ref[0], this.real_y = ref[1], ref;
    };

    Bullet.prototype.draw = function() {
      this.field.ctx.rotate(this.direction * 90 * Math.PI / 180);
      this.field.ctx.drawImage(bulletImage, this.real_x, this.real_y, this.width, this.height);
      return this.field.ctx.restore();
    };

    return Bullet;

  })();

  Life = (function() {
    function Life(life, id1, field1, user1) {
      this.life = life;
      this.id = id1;
      this.field = field1;
      this.user = user1;
    }

    Life.prototype.draw = function() {};

    Life.prototype.damage = function() {};

    return Life;

  })();

  fps = 10;

  winFieldWidth = 400;

  winFieldHeight = 400;

  winAdditionalWidth = 200;

  fieldWidth = 20;

  fieldHeight = 20;

  bulletImage = new Image();

  bulletImage.src = 'static/img/games/Arr/bullet.png';

  window.playerImages = playerImages = [new Image(), new Image()];

  playerImages[0].src = 'static/img/games/Arr/player1.png';

  playerImages[1].src = 'static/img/games/Arr/player2.png';

  field = new Field(document.getElementById('canvas'), fieldWidth, fieldHeight);

  window.field = field;

  window.Bullet = Bullet;

  field.addPlayer(10, 10, '');

  field.start();

}).call(this);

//# sourceMappingURL=main.js.map
