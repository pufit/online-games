// Generated by CoffeeScript 1.12.7
(function() {
  var ArrWS, Bullet, Field, Player, bulletImage, playerImages, winAdditionalWidth,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Field = (function() {
    function Field(canvas, game) {
      this.canvas = canvas;
      this.game = game;
      this.width = this.game.config.width;
      this.height = this.game.config.height;
      this.jqcanvas = $('#canvas');
      this.canvasHeight = this.canvasWidth = this.canvas.height = this.canvas.width = Math.min(this.jqcanvas.width() - winAdditionalWidth, this.jqcanvas.height());
      this.canvas.width += winAdditionalWidth;
      this.jqcanvas.width(this.canvas.width);
      this.jqcanvas.height(this.canvas.height);
      this.ctx = this.canvas.getContext('2d');
      this.dotsColor = "173, 192, 219";
      this.players = [];
      this.bullets = [];
    }

    Field.prototype.drawDots = function() {
      var i, j, l, ref, results, x, y;
      results = [];
      for (i = l = 0, ref = this.width; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
        results.push((function() {
          var m, ref1, results1;
          results1 = [];
          for (j = m = 0, ref1 = this.height; 0 <= ref1 ? m < ref1 : m > ref1; j = 0 <= ref1 ? ++m : --m) {
            x = Math.floor(Math.floor(this.canvasWidth / this.width) / 2) + Math.floor(i * this.canvasWidth / this.width);
            y = Math.floor(Math.floor(this.canvasHeight / this.height) / 2) + Math.floor(j * this.canvasHeight / this.height);
            this.ctx.beginPath();
            this.ctx.arc(x, y, 1, 0, 2 * Math.PI);
            this.ctx.fillStyle = "rgb(" + this.dotsColor + ")";
            results1.push(this.ctx.fill());
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Field.prototype.addNewPlayer = function(id, user) {
      var player;
      player = new Player(0, 0, id, this, user);
      this.players.push(player);
      return player;
    };

    Field.prototype.update = function(players, bullets) {
      var bullet, l, len, len1, m, par, player, up_player;
      for (l = 0, len = players.length; l < len; l++) {
        player = players[l];
        up_player = this.players[player.id];
        for (par in player) {
          up_player[par] = player[par];
        }
      }
      this.bullets = [];
      for (m = 0, len1 = bullets.length; m < len1; m++) {
        bullet = bullets[m];
        this.bullets.push(new Bullet(bullet.x, bullet.y, bullet.direction, this));
      }
      return this.draw();
    };

    Field.prototype.draw = function() {
      var bullet, l, len, len1, m, player, ref, ref1, results;
      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
      this.ctx.globalAlpha = 1;
      this.drawDots();
      ref = this.players;
      for (l = 0, len = ref.length; l < len; l++) {
        player = ref[l];
        if (player.life) {
          player.draw();
        }
      }
      ref1 = this.bullets;
      results = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        bullet = ref1[m];
        results.push(bullet.draw());
      }
      return results;
    };

    Field.prototype.cordToCord = function(x, y, k) {
      return [Math.floor(x * this.canvasHeight / this.width) + k, Math.floor(y * this.canvasHeight / this.height) + k];
    };

    return Field;

  })();

  Player = (function() {
    function Player(x1, y1, id1, field1, user1) {
      var ref;
      this.x = x1;
      this.y = y1;
      this.id = id1;
      this.field = field1;
      this.user = user1;
      this.life = 10;
      this.direction = 0;
      this.width = Math.floor(this.field.canvasWidth / this.field.width) - 2;
      this.height = Math.floor(this.field.canvasHeight / this.field.height) - 2;
      ref = this.field.cordToCord(this.x, this.y, 2), this.real_x = ref[0], this.real_y = ref[1];
    }

    Player.prototype.draw = function() {
      var ref;
      ref = this.field.cordToCord(this.x, this.y, 2), this.real_x = ref[0], this.real_y = ref[1];
      this.field.ctx.save();
      this.field.ctx.translate(this.real_x + this.width / 2, this.real_y + this.height / 2);
      this.field.ctx.rotate(this.direction * 90 * Math.PI / 180);
      this.field.ctx.drawImage(playerImages[this.id], -this.width / 2, -this.height / 2, this.width, this.height);
      return this.field.ctx.restore();
    };

    return Player;

  })();

  Bullet = (function() {
    function Bullet(x1, y1, direction, field1) {
      var ref;
      this.x = x1;
      this.y = y1;
      this.direction = direction;
      this.field = field1;
      ref = this.field.cordToCord(this.x, this.y, 3), this.real_x = ref[0], this.real_y = ref[1];
      this.width = Math.floor(this.field.canvasWidth / this.field.width) - 8;
      this.height = Math.floor(this.field.canvasHeight / this.field.height) - 8;
    }

    Bullet.prototype.draw = function() {
      var ref;
      ref = this.field.cordToCord(this.x, this.y, 2), this.real_x = ref[0], this.real_y = ref[1];
      this.field.ctx.save();
      this.field.ctx.translate(this.real_x + this.width / 2, this.real_y + this.height / 2);
      this.field.ctx.rotate(this.direction * 90 * Math.PI / 180);
      this.field.ctx.drawImage(bulletImage, -this.width / 2, -this.height / 2, this.width, this.height);
      return this.field.ctx.restore();
    };

    return Bullet;

  })();

  ArrWS = (function(superClass) {
    extend(ArrWS, superClass);

    function ArrWS() {
      return ArrWS.__super__.constructor.apply(this, arguments);
    }

    ArrWS.prototype.auth_ok = function(data) {
      ArrWS.__super__.auth_ok.call(this, data);
      return this.send('join', gameName);
    };

    ArrWS.prototype.do_action = function(data) {
      return this.send('action', {
        'action_type': 'do_action',
        'direction': data
      });
    };

    ArrWS.prototype.success_join = function(data) {
      var field, l, len, player, ref;
      ArrWS.__super__.success_join.call(this, data);
      window.field = field = new Field(document.getElementById('canvas'), data.game);
      ref = Object.values(data.players);
      for (l = 0, len = ref.length; l < len; l++) {
        player = ref[l];
        field.addNewPlayer(player.id, player.player_information);
      }
      return $(document).keydown((function(_this) {
        return function(event) {
          if (event.which === 37) {
            _this.do_action('left');
          }
          if (event.which === 39) {
            _this.do_action('right');
          }
          if (event.which === 38) {
            _this.do_action('up');
          }
          if (event.which === 40) {
            _this.do_action('down');
          }
          if (event.which === 32) {
            return _this.do_action('shoot');
          }
        };
      })(this));
    };

    ArrWS.prototype.new_player_connected = function(data) {
      ArrWS.__super__.new_player_connected.call(this, data);
      return field.addNewPlayer(data.id, data.player_information);
    };

    ArrWS.prototype.player_left = function(data) {
      var l, len, player, ref, results;
      console.log('player_left');
      ref = field.players;
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        player = ref[l];
        if (player.user.user === data) {
          field.players.splice(field.players.indexOf(player), 1);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ArrWS.prototype.tick_passed = function(data) {
      return field.update(data.players, data.bullets);
    };

    return ArrWS;

  })(WSClient);

  winAdditionalWidth = 200;

  bulletImage = new Image();

  bulletImage.src = 'static/img/bullet.png';

  window.playerImages = playerImages = [new Image(), new Image(), new Image(), new Image()];

  playerImages[0].src = 'static/img/player1.png';

  playerImages[1].src = 'static/img/player2.png';

  playerImages[2].src = 'static/img/player3.png';

  playerImages[3].src = 'static/img/player4.png';

  window.ArrWS = ArrWS = new ArrWS();

}).call(this);

//# sourceMappingURL=main.js.map
